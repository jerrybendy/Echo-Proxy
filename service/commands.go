package service

import (
	"bytes"
	"io"
	"log"
	"os"
	"strings"
)

func HandleCommandLine() {
	command := os.Args[1]

	log.Println(command)

	switch command {
	case "addHostsRecord":
		if err := addHostsRecordCommand(); err != nil {
			log.Println(err.Error())
			os.Exit(1)
		}

	case "removeHostsRecord":
		if err := removeHostsRecordCommand(); err != nil {
			log.Println(err.Error())
			os.Exit(1)
		}
	}
}

func addHostsRecordCommand() error {
	hostsFilePath := getHostsFilePath()
	file, err := os.OpenFile(hostsFilePath, os.O_APPEND|os.O_WRONLY, 0644)
	if err != nil {
		return err
	}
	defer file.Close()

	data := bytes.NewBufferString("\n# Auto generated by Echo Proxy")
	for _, h := range config.Hosts {
		if h.ApplyHosts {
			_, err = data.WriteString("\n127.0.0.1 " + h.Name + " # Auto generated by Echo Proxy")
			_, err = data.WriteString("\n::1 " + h.Name + " # Auto generated by Echo Proxy")
			if err != nil {
				return err
			}
		}
	}
	_, err = file.Write(data.Bytes())
	return err
}

func removeHostsRecordCommand() error {
	hostsFilePath := getHostsFilePath()
	file, err := os.OpenFile(hostsFilePath, os.O_RDWR, 0644)
	if err != nil {
		return err
	}
	defer file.Close()

	fileContent, err := io.ReadAll(file)
	if err != nil {
		return err
	}

	lines := strings.Split(string(fileContent), "\n")
	dstFileLines := make([]string, 0, len(lines))

	for _, line := range lines {
		if !strings.Contains(line, "# Auto generated by Echo Proxy") {
			dstFileLines = append(dstFileLines, line)
		}
	}

	if len(lines) != len(dstFileLines) {
		if err := file.Truncate(0); err != nil {
			return err
		}
		_, _ = file.Seek(0, 0)
		_, err = file.Write([]byte(strings.Join(dstFileLines, "\n")))
		if err != nil {
			return err
		}
	}

	return nil
}
